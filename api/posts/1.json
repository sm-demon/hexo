{"total":2,"pageSize":10,"pageCount":1,"data":[{"title":"Hello World","slug":"hello-world","date":"2019-01-04T12:44:09.580Z","updated":"2019-01-04T12:44:09.580Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"html+css+js复习题","slug":"myfirst","date":"2019-01-04T07:19:04.000Z","updated":"2019-01-04T12:50:52.195Z","comments":true,"path":"api/articles/myfirst.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p><strong>复习</strong></p>\n</blockquote>\n<p><strong>处理元素溢出</strong></p>\n<ul>\n<li>属性名：<code>overflow-x</code>   <code>overflow-y</code>  <code>overflow</code></li>\n<li>属性值: <ul>\n<li><code>visible</code>   内容不会被修剪，会呈现在元素 之外</li>\n<li><code>hidden</code>    溢出部分不可见</li>\n<li><code>scroll</code>    显示滚动条</li>\n<li><code>auto</code>      浏览器决定显示方式，内容太多显示滚动条，否则不显示</li>\n</ul>\n</li>\n</ul>\n<p><strong>清除浮动</strong></p>\n<p><code>clear</code> 设置元素的左右边界都不允许出现浮动元素</p>\n<p><strong>定位</strong></p>\n<p>相对定位：<code>relative</code>   绝对定位：<code>absolute</code>  固定定位：<code>fixed</code></p>\n<p><strong>表单中的选取文件</strong></p>\n<p><code>&lt;input type=&quot;file&quot;&gt;</code></p>\n<p><strong>下拉列表</strong></p>\n<p> <code>select</code>  定义下拉列表 </p>\n<p> <code>option</code>  列表项</p>\n<p><strong>文本域</strong>  </p>\n<p><code>textarea</code></p>\n<p><strong>将表单元素分组</strong></p>\n<p><code>fieldset</code>  元素组合表单中的相关数据</p>\n<p><code>legend</code>    为 <code>fieldset</code> 元素定义标题</p>\n<p><strong>设置光标样式</strong></p>\n<p><code>cursor</code> 属性用来该表鼠标的外形</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>default</th>\n<th>pointer</th>\n<th>wait</th>\n<th>help</th>\n<th>text</th>\n<th>crosshair</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>说明</td>\n<td>默认</td>\n<td>小手</td>\n<td>等待</td>\n<td>问号</td>\n<td>文本</td>\n<td>十字</td>\n</tr>\n</tbody>\n</table>\n<p><strong>透明度</strong></p>\n<p><code>opacity</code> 取值范围是0 ~ 1，IE不支持<code>opacity</code></p>\n<p><strong>外边线</strong></p>\n<p><code>outline</code> </p>\n<p><strong>对话框</strong></p>\n<p>警告框：<code>alert()</code>  确认框：<code>confirm()</code>  输入框：<code>prompt()</code></p>\n<p><strong>标识符的组合规则</strong></p>\n<ul>\n<li><p>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）</p>\n</li>\n<li><p>其他字符可以是字母、下划线、美元符号或数字。</p>\n</li>\n</ul>\n<p><strong>变量声明提升</strong></p>\n<p>变量被定义之后，你可以通过变量名称读取变量的值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"keyword\">var</span> myVariable = <span class=\"string\">'Hello JavaScript'</span>;</span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"built_in\">console</span>.log(myVariable);</span><br></pre></td></tr></table></figure></p>\n<p>但是，在变量定义代码之前，通过变量名称读取变量的值，会出现什么情况呢：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"built_in\">console</span>.log(myVariable);              <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"keyword\">var</span> myVariable = <span class=\"string\">'Hello JavaScript'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>由于变量的声明会被提升到当前作用域的最顶端，而赋值并不会被提升，因此上面的代码输出 undefined。可以使用下面的代码解释：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"keyword\">var</span> myVariable;</span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"built_in\">console</span>.log(myVariable);           <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"number\">3</span>   myVariable = <span class=\"string\">'Hello JavaScript'</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p><strong>动态类型</strong></p>\n<p>JavaScript 是一种<strong>弱类型</strong>或者说<strong>动态</strong>语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"comment\">// 在其他编程语言中，变量的空间所能存放的数据类型是事先规定好的</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"comment\">// 比如使用 int 关键字声明的变量空间中只能存放整数</span></span><br><span class=\"line\"><span class=\"number\">3</span>   int    num = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"number\">4</span>   string name = <span class=\"string\">\"李四\"</span></span><br><span class=\"line\"><span class=\"number\">5</span>   float  price = <span class=\"number\">2.98</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span>   <span class=\"comment\">// 然而，JS 变量的内存空间中可以存放任意类型的数据</span></span><br><span class=\"line\"><span class=\"number\">9</span>   <span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;    <span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"number\">10</span>  foo = <span class=\"string\">\"bar\"</span>; <span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"number\">11</span>  foo = <span class=\"literal\">true</span>;  <span class=\"comment\">// 逻辑真</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数据类型</strong></p>\n<ul>\n<li><p>6种原始类型：</p>\n<ul>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol (ECMAScript 6 新定义)</li>\n</ul>\n</li>\n<li><p>和Object</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"built_in\">Number</span>    -- 整数和浮点数（小数）。</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"built_in\">String</span>    -- 使用单引号或双引号括起来的值，比如：<span class=\"string\">'Hello World!'</span>。</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"built_in\">Boolean</span>   -- <span class=\"literal\">true</span> 和 <span class=\"literal\">false</span> 。</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span>   Undefined -- 任何一个只声明而没有赋值的变量都会被隐式的赋值为 <span class=\"literal\">undefined</span> 。</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span>   Null      -- 只有一个 <span class=\"literal\">null</span> ，指向一个空值的关键字。</span><br></pre></td></tr></table></figure>\n<p><strong>检测数据类型</strong></p>\n<p>使用<code>typeof</code>来检测数据的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"keyword\">var</span> myName  = <span class=\"string\">'魏素'</span>;</span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"keyword\">var</span> myage   = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"keyword\">var</span> married = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"keyword\">var</span> mycar   = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"keyword\">var</span> myBoyFriend;</span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"keyword\">var</span> myphone = &#123;</span><br><span class=\"line\"><span class=\"number\">7</span>   brand: <span class=\"string\">'vivo'</span>,</span><br><span class=\"line\"><span class=\"number\">8</span>   number: <span class=\"number\">13624567789</span>,</span><br><span class=\"line\"><span class=\"number\">9</span>   color: <span class=\"string\">'土豪金'</span></span><br><span class=\"line\"><span class=\"number\">10</span>  &#125;;</span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">12</span>  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myName);       <span class=\"comment\">// 'string'</span></span><br><span class=\"line\"><span class=\"number\">13</span>  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myage);        <span class=\"comment\">// 'number'</span></span><br><span class=\"line\"><span class=\"number\">14</span>  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> married);      <span class=\"comment\">// 'boolean'</span></span><br><span class=\"line\"><span class=\"number\">15</span>  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> mycar);        <span class=\"comment\">// 'object'</span></span><br><span class=\"line\"><span class=\"number\">16</span>  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myBoyFriend);  <span class=\"comment\">// 'undefined'</span></span><br><span class=\"line\"><span class=\"number\">17</span>  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myphone);      <span class=\"comment\">// 'object'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h1><p>强制转换：编程人员编写代码强制对数据进行转换。</p>\n<p>隐式转换：不是编程人员刻意去转换的，而是浏览器（JS 解析引擎）帮我们自动转换的。</p>\n<p><strong>其他类型转成Number</strong></p>\n<ul>\n<li>使用 <code>Number()</code> 方法将其他类型的数据转换成 <code>Number</code> 类型</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">'abc'</span>));            <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">'123.456'</span>));        <span class=\"comment\">// 123.456</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">'789'</span>));            <span class=\"comment\">// 789</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">'123abc'</span>));         <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"string\">'abc123'</span>));         <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>));                <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">7</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"literal\">true</span>));                <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"number\">8</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>));               <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">9</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>));           <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">10</span>  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>(&#123;<span class=\"attr\">myName</span>: <span class=\"string\">'李四'</span>&#125;));    <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>parseInt()</code> 方法将其他类型的数据转换成 <code>Number</code> 类型<br>将数字类型的字符串通过该方法转换后，只保留数字的整数部分，不会进行四舍五入运算。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"keyword\">var</span> num = <span class=\"string\">'123.1243'</span></span><br><span class=\"line\"><span class=\"number\">2</span>   num = <span class=\"built_in\">parseInt</span>(num);</span><br><span class=\"line\"><span class=\"number\">3</span>   alert(num);</span><br><span class=\"line\"><span class=\"number\">4</span>   alert(<span class=\"keyword\">typeof</span> num);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>parseFloat()</code> 方法将其他类型的数据转换成 <code>Number</code> 类型<br>结果保留原数据，不会对数字进行四舍五入运算。</li>\n</ul>\n<p>如果在数字后加上非数字的字符，也可以转换成功</p>\n<p><strong>其他类型转成String</strong></p>\n<p>使用 <code>String()</code> 方法将其他类型的数据转换成 <code>String</code> 类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(<span class=\"number\">123.456</span>));          <span class=\"comment\">// '123.456'</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(<span class=\"literal\">null</span>));             <span class=\"comment\">// 'null'</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(<span class=\"literal\">true</span>));             <span class=\"comment\">// 'true'</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(<span class=\"literal\">undefined</span>));        <span class=\"comment\">// 'undefined'  </span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>(&#123;<span class=\"attr\">myName</span>: <span class=\"string\">'李四'</span>&#125;)); <span class=\"comment\">// '[object Object]'</span></span><br></pre></td></tr></table></figure>\n<p>使用加号操作符（+）把它与一个空字符串（””）相加。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   a + <span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>其他类型转成Boolean</strong></p>\n<p>使用 <code>Boolean()</code> 方法将其他类型的数据转换成 <code>Boolean</code> 类型</p>\n<p>下面这些值将被转换成 <code>false</code></p>\n<ul>\n<li>false</li>\n<li>undefined</li>\n<li>null</li>\n<li>0</li>\n<li>NaN</li>\n<li>‘’<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>));      <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">undefined</span>));  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">null</span>));       <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"number\">0</span>));          <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">NaN</span>));        <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">''</span>));         <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面这些值将被转换成 <code>true</code>。</p>\n<ul>\n<li>非空字符串</li>\n<li>非零数字</li>\n<li>对象</li>\n<li>true</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>));             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"number\">9527</span>));            <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(&#123;<span class=\"attr\">myname</span>: <span class=\"string\">'Bob'</span>&#125;));  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Boolean</span>(<span class=\"string\">'abcd'</span>));           <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>自增自减操作符</strong></p>\n<h4 id=\"i-i\"><a href=\"#i-i\" class=\"headerlink\" title=\"i++ ++i\"></a>i++ ++i</h4><ul>\n<li>在不参与运算的情况下：它们都是自增1</li>\n<li>在参与运算的情况下，++写在后面，先参与运算，然后加1；++写在前面，在参与运算前，i先加1，然后再参与运算。</li>\n</ul>\n<h4 id=\"i–-–i\"><a href=\"#i–-–i\" class=\"headerlink\" title=\"i–- -–i\"></a>i–- -–i</h4><ul>\n<li>在不参与运算的情况下，都是自减1</li>\n<li>在参与运算的情况下，–写在后面，先参与运算，然后减1；–写在前面，在参与运算前，i先减1，然后再参与运算。</li>\n</ul>\n<p><strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>与(且)</td>\n</tr>\n<tr>\n<td><code>ll</code></td>\n<td>或</td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td>非</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"逻辑与（-amp-amp-）\"><a href=\"#逻辑与（-amp-amp-）\" class=\"headerlink\" title=\"逻辑与（&amp;&amp;）\"></a>逻辑与（&amp;&amp;）</h4><p>逻辑与的真值表如下：<br>| 第一个操作数 | 第二个操作数 | 结果 |<br>|—|—|—|<br>| true | true | true |<br>| true | false | false |<br>| false | true | false |<br>| false | false | false |</p>\n<p>当然，逻辑与的操作数不仅仅是布尔值，还可以应用于任何类型的操作数。此时，它遵循下列规则：</p>\n<ul>\n<li>如果两个操作数被转换成布尔值之后都是 true，则返回第二个操作数；</li>\n<li>如果两个操作数被转换成布尔值之后都是 false，则返回第一个操作数；</li>\n<li>如果两个操作数被转换成布尔值之后一个是 true，一个 false，则返回 false 对应的操作数；</li>\n</ul>\n<h4 id=\"逻辑或（-）\"><a href=\"#逻辑或（-）\" class=\"headerlink\" title=\"逻辑或（||）\"></a>逻辑或（||）</h4><p>逻辑或的真值表如下：<br>| 第一个操作数 | 第二个操作数 | 结果 |<br>|—|—|—|<br>| true | true | true |<br>| true | false | true |<br>| false | true | true |<br>| false | false | false |</p>\n<p>与逻辑与操作符一样，逻辑或的操作数也不仅限于布尔值，它也可以是其他类型的操作数。此时，它遵循下列规则：</p>\n<ul>\n<li>如果两个操作数被转换成布尔值之后都是true，则返回第一操作数</li>\n<li>如果两个操作数被转换成布尔值之后都是false，则返回第二操作数</li>\n<li>如果两个操作数被转换成布尔值之后一个是true，一个false，则返回true对应的操作数</li>\n</ul>\n<h4 id=\"逻辑非（-）\"><a href=\"#逻辑非（-）\" class=\"headerlink\" title=\"逻辑非（!）\"></a>逻辑非（!）</h4><p>逻辑非操作符由一个叹号（！）表示，可以应用于 ECMAScript 中的任何值。无论这个值是什么数据类型，这个操作符都会返回一个布尔值。逻辑非操作符首先会将它的操作数转换为一个布尔值，然后再对其求反。逻辑非操作符遵循下列规则：</p>\n<ul>\n<li>如果操作数被转换成布尔值之后是true，直接返回布尔值：false；</li>\n<li>如果操作数被转换成布尔值之后是false，直接返回布尔值：true；</li>\n</ul>\n<p><strong>条件运算符</strong></p>\n<p>语法：</p>\n<p><code>javascript 表达式 ? 如果表达式结果为true执行这里的代码 : 如果表达式结果为false执行冒号后面的代码 ;</code></p>\n<p>执行顺序：</p>\n<ul>\n<li>判断条件表达式是否为 true。</li>\n<li>如果为 true，执行问号（?）后面的代码。</li>\n<li>如果为 false，执行冒号（:）后面的代码。</li>\n</ul>\n<p><strong>switch语句</strong></p>\n<p>switch 语句允许用一个表达式的值或一个变量和 case 标签后面的值相匹配。如果匹配成功，就执行这个 case 标签后面的代码。</p>\n<p>执行顺序：</p>\n<ul>\n<li>首先会判断第一个 case 后面的值是否与表达式的结果相等；</li>\n<li>如果相等，就会执行 case 后面代码，当遇到 break 时，switch 语句停止执行；</li>\n<li>如果不匹配，接着判断下一个 case 后面的值；</li>\n<li>如果所有的 case 都不匹配， 程序会去执行 default 后面的代码，</li>\n</ul>\n<p><strong>break语句</strong></p>\n<p>break语句可以在循环体或判断语句中，只要代码遇到break，就会立马结束当前循环或者判断。</p>\n<p><strong>for语句</strong></p>\n<p>执行顺序：</p>\n<ul>\n<li>首先进行变量初始化（var i = 0）；</li>\n<li>判断条件表达式是否成立（i &lt;= 10）;</li>\n<li>如果条件成立，则执行循环体内的代码，执行完之后，执行 i++，让 i 自增 1 ，接着再次判断条件表达式是否成立，如此循环往复，直到条件表达式不成立为止；</li>\n<li>如果条件不成立，则循环体内的代码不会执行，循环结束。</li>\n</ul>\n<p><strong>continue语句</strong></p>\n<p>continue语句的作用是终止本次循环，接着进行下一次循环。</p>\n<p><strong>while语句</strong></p>\n<p>执行顺序：</p>\n<ul>\n<li>首先判断条件表达式是否成立；</li>\n<li>如果成立，执行大括号中的代码，然后再次判断条件表达式是否成立；</li>\n<li>如果不成立，就不执行大括号中的代码，循环结束。</li>\n</ul>\n<p><strong>do-while语句</strong></p>\n<p>执行顺序：</p>\n<ul>\n<li>程序一开始，直接进入循环体内，执行一遍循环体内的代码；</li>\n<li>判断条件表达式是否成立，如果条件成立，那么继续执行循环体内的代码；</li>\n<li>如果条件表达式是否成立，那么循环体内的代码就不再执行，循环结束；</li>\n</ul>\n<p><strong>数组的操作方法</strong></p>\n","text":"复习处理元素溢出属性名：overflow-x   overflow-y  overflow属性值: visible   内容不会被修剪，会呈现在元素 之外hidden    溢出部分不可见scroll    显示滚动条auto      浏览器决定显示方式，内容太多显示滚动条，否","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}